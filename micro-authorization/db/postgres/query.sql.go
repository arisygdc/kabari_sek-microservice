// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const rolePermissions = `-- name: RolePermissions :many
SELECT role_id, permission_id, id, name FROM role_permission rp
INNER JOIN permission p ON rp.permission_id = p.id
WHERE rp.role_id = $1
`

type RolePermissionsRow struct {
	RoleID       int16  `json:"role_id"`
	PermissionID int16  `json:"permission_id"`
	ID           int16  `json:"id"`
	Name         string `json:"name"`
}

func (q *Queries) RolePermissions(ctx context.Context, roleID int16) ([]RolePermissionsRow, error) {
	rows, err := q.db.Query(ctx, rolePermissions, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RolePermissionsRow
	for rows.Next() {
		var i RolePermissionsRow
		if err := rows.Scan(
			&i.RoleID,
			&i.PermissionID,
			&i.ID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userBannedPermissions = `-- name: UserBannedPermissions :many
SELECT id, user_id, permission_id, banned_at, banned_exp FROM user_banned_permission WHERE user_id = $1 AND banned_exp > $2::bigint
`

type UserBannedPermissionsParams struct {
	UserID uuid.UUID `json:"user_id"`
	Now    int64     `json:"now"`
}

func (q *Queries) UserBannedPermissions(ctx context.Context, arg UserBannedPermissionsParams) ([]UserBannedPermission, error) {
	rows, err := q.db.Query(ctx, userBannedPermissions, arg.UserID, arg.Now)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserBannedPermission
	for rows.Next() {
		var i UserBannedPermission
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PermissionID,
			&i.BannedAt,
			&i.BannedExp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userBannedRoles = `-- name: UserBannedRoles :many
SELECT id, user_id, role_id, banned_at, banned_exp FROM user_banned_role WHERE user_id = $1 AND banned_exp > $2::bigint
`

type UserBannedRolesParams struct {
	UserID uuid.UUID `json:"user_id"`
	Now    int64     `json:"now"`
}

func (q *Queries) UserBannedRoles(ctx context.Context, arg UserBannedRolesParams) ([]UserBannedRole, error) {
	rows, err := q.db.Query(ctx, userBannedRoles, arg.UserID, arg.Now)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserBannedRole
	for rows.Next() {
		var i UserBannedRole
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoleID,
			&i.BannedAt,
			&i.BannedExp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userRoles = `-- name: UserRoles :many
SELECT r.id, r.name FROM user_role ur
INNER JOIN role r ON ur.role_id = r.id
WHERE ur.user_id = $1
`

func (q *Queries) UserRoles(ctx context.Context, userID uuid.UUID) ([]Role, error) {
	rows, err := q.db.Query(ctx, userRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
