// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const bannUserPermission = `-- name: BannUserPermission :exec
INSERT INTO user_banned_permission (user_id, permission_id, banned_at, banned_exp) VALUES ($1, $2, $3, $4)
`

type BannUserPermissionParams struct {
	UserID       uuid.UUID
	PermissionID int16
	BannedAt     int64
	BannedExp    int64
}

func (q *Queries) BannUserPermission(ctx context.Context, arg BannUserPermissionParams) error {
	_, err := q.db.Exec(ctx, bannUserPermission,
		arg.UserID,
		arg.PermissionID,
		arg.BannedAt,
		arg.BannedExp,
	)
	return err
}

const permission = `-- name: Permission :one
SELECT id, name FROM permission WHERE name = $1
`

func (q *Queries) Permission(ctx context.Context, name string) (Permission, error) {
	row := q.db.QueryRow(ctx, permission, name)
	var i Permission
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const role = `-- name: Role :one
SELECT id, name FROM role WHERE name = $1
`

func (q *Queries) Role(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, role, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const roleGrantPermission = `-- name: RoleGrantPermission :exec
INSERT INTO role_permission (role_id, permission_id) VALUES ($1, $2)
`

type RoleGrantPermissionParams struct {
	RoleID       int16
	PermissionID int16
}

func (q *Queries) RoleGrantPermission(ctx context.Context, arg RoleGrantPermissionParams) error {
	_, err := q.db.Exec(ctx, roleGrantPermission, arg.RoleID, arg.PermissionID)
	return err
}

const userBannedPermission = `-- name: UserBannedPermission :one
SELECT id, user_id, permission_id, banned_at, banned_exp FROM user_banned_permission WHERE user_id = $1 AND permission_id = $2 AND banned_exp > $3::bigint
`

type UserBannedPermissionParams struct {
	UserID       uuid.UUID
	PermissionID int16
	Now          int64
}

func (q *Queries) UserBannedPermission(ctx context.Context, arg UserBannedPermissionParams) (UserBannedPermission, error) {
	row := q.db.QueryRow(ctx, userBannedPermission, arg.UserID, arg.PermissionID, arg.Now)
	var i UserBannedPermission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PermissionID,
		&i.BannedAt,
		&i.BannedExp,
	)
	return i, err
}

const userPermit = `-- name: UserPermit :one
SELECT rp.role_id, rp.permission_id FROM user_role ur
INNER JOIN role_permission rp ON ur.role_id = rp.role_id
WHERE ur.user_id = $1 AND rp.permission_id = $2
`

type UserPermitParams struct {
	UserID       uuid.UUID
	PermissionID int16
}

func (q *Queries) UserPermit(ctx context.Context, arg UserPermitParams) (RolePermission, error) {
	row := q.db.QueryRow(ctx, userPermit, arg.UserID, arg.PermissionID)
	var i RolePermission
	err := row.Scan(&i.RoleID, &i.PermissionID)
	return i, err
}
